{"version":3,"sources":["style.js","App.js","index.js"],"names":["Wrapper","styled","div","LeftWrapper","RightWrapper","StrokeShow","StrokeNameList","CharacterWrapper","FunctionWrapper","HistoryWrapper","Character","ButtonWrapper","TitleTextSpan","span","TitleTextSpan2","ContextRegularSpan","ImageContainer","TitleWrapper","DataSetTitle","TextRegular","text","getMapImageUrls","res","images","forEach","image","id","fileName","App","canvasRef","useRef","useState","currentStroke","setCurrentStroke","currentChar","setCurrentChar","strokeList","setStrokeList","strokeIndex","setStrokeIndex","strokeCompleted","setStrokeCompleted","imagesUrls","mapUrls","systemInfo","setSystemInfo","result","setResult","tempPoints","addPoints","currentAuthor","setCurrentAuthor","sysInfoLoading","setSysInfoLoading","currentCharLoading","setCurrentCharLoading","strokeListLoading","setStrokeListLoading","submitLoading","setSubmitLoading","submitSuccess","setSubmitSuccess","useEffect","a","axios","reqResult","data","canvasClear","currentImageId","author","c_id","strokesData","strokes","find","stroke","current","getContext","clearRect","nextStroke","message","warning","length","strokeOrderLength","thisStroke","name","record","reStartChar","submitChar","skip","ans","dataSetId","charId","charName","post","useHotkeys","style","fontSize","margin","tip","description","type","Group","value","size","buttonStyle","map","item","Button","onClick","height","width","padding","border","borderRadius","borderTop","title","percent","steps","showInfo","bordered","Item","label","src","strokeOrderImageUrl","placeholder","prefix","UserOutlined","onChange","e","target","status","total","alt","left","position","ref","error","canvas","getBoundingClientRect","top","x","clientX","y","clientY","ctx","lineWidth","beginPath","arc","Math","PI","strokeStyle","fillStyle","Paint","disabled","danger","borderBottom","overflow","index","display","flexDirection","alignItems","item2","index2","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9bb98921.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  margin: 50px auto;\r\n  width: 1500px;\r\n  height: 800px;\r\n  border: 2px solid black;\r\n  border-radius: 20px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  canvas {\r\n    width: 256px;\r\n    height: 256px;\r\n    border: 2px solid black;\r\n  }\r\n`;\r\n\r\n// 左侧\r\nexport const LeftWrapper = styled.div`\r\n  width: 750px;\r\n  height: 750px;\r\n  border-right: 2px solid gray;\r\n  padding-right: 5px;\r\n  /* border-radius: 20px; */\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\n// 右侧大的组件\r\nexport const RightWrapper = styled.div`\r\n  margin-left: auto;\r\n  width: 800px;\r\n  height: 750px;\r\n  /* border: 2px solid black; */\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport const StrokeShow = styled.div`\r\n  /* border: 1px solid red; */\r\n  /* border-top: 1px solid #C0C0C0; */\r\n  /* height: 630px; */\r\n  margin-bottom: 27px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n  .text {\r\n    font-size : 25px;\r\n  }\r\n`;\r\n\r\nexport const StrokeNameList = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  margin-top: 10px;\r\n  border-bottom: #C0C0C0;\r\n  width: 650px;\r\n  border: 1px solid black;\r\n  border-radius: 10px;\r\n  border-bottom: 1px solid white;\r\n`;\r\n\r\nexport const CharacterWrapper = styled.div`\r\n  width: 650px;\r\n  height: 600px;\r\n  border: 1px solid black;\r\n  border-radius: 10px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const FunctionWrapper = styled.div`\r\n  width: 300px;\r\n  /* border: 1px solid blue; */\r\n`;\r\n\r\nexport const HistoryWrapper = styled.div`\r\n  margin: 20px;\r\n  width: 250px;\r\n  border: 1px solid gray;\r\n  border-radius: 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Character = styled.div`\r\n  width: 300px;\r\n  height: 300px;\r\n  border: 1px solid gray;\r\n  border-radius: 5px;\r\n  position: relative;\r\n  canvas {\r\n    width: 256px;\r\n    height: 256px;\r\n    margin: 22px;\r\n    border: 0;\r\n  }\r\n  img {\r\n    width: 256px;\r\n    height: 256px;\r\n    border: 1px solid red;\r\n    margin: 22px;\r\n    z-index: -1;\r\n  }\r\n`;\r\n\r\n\r\nexport const ButtonWrapper = styled.div`\r\n  margin-top: 20px;\r\n  width: 256px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  Button {\r\n    margin: 5px;\r\n  }\r\n`;\r\n\r\nexport const StrokePicture = styled.div`\r\n  width: 45px;\r\n  height: 45px;\r\n  border: 2px solid #1890ff;\r\n  img {\r\n    margin: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n  \r\n`;\r\n\r\nexport const CurrentStrokeWrapper = styled.div`\r\n  margin: 20px;\r\n`;\r\n\r\nexport const TitleTextSpan = styled.span`\r\n  font-size: 22px;\r\n`;\r\n\r\n\r\nexport const TitleTextSpan2 = styled.span`\r\n  font-size: 20px;\r\n`;\r\n\r\nexport const ContextRegularSpan = styled.span`\r\n  font-size: 18px;\r\n  font-weight: normal;\r\n`;\r\n\r\n\r\nexport const ImageContainer = styled.div`\r\n  width: 140px;\r\n  height: auto;\r\n  border: 1px solid #1890FF;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const TitleWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n`;\r\n\r\nexport const DataSetTitle = styled.div`\r\n  margin-top: 20px;\r\n  height: auto;\r\n  width: 648px;\r\n`;\r\n\r\n// 是否已经标注\r\n// 撤销笔画\r\n// 跳转到哪一个字（记录个人标注的进度）+ 30/111","import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport './App.css';\n\nimport strokesData from './config/strokes-detail.json';\nimport { images } from './config/images.json';\n\nimport {\n  Wrapper,\n  RightWrapper,\n  StrokeShow,\n  LeftWrapper,\n  CharacterWrapper,\n  FunctionWrapper,\n  HistoryWrapper,\n  Character,\n  ButtonWrapper,\n  StrokeNameList,\n  TitleTextSpan,\n  ContextRegularSpan,\n  ImageContainer,\n  TitleWrapper,\n  DataSetTitle,\n  TitleTextSpan2\n} from './style';\n\n// import StrokePicker from './components/stroke-picker';\n\nimport { Button, Radio, Progress, Image, Descriptions, Badge, message, Input, Spin, Alert } from 'antd';\n\nimport { UserOutlined } from '@ant-design/icons';\n\nconst TextRegular = (text) => {\n  return (\n    <ContextRegularSpan>{text}</ContextRegularSpan>\n  )\n}\n\nconst getMapImageUrls = () => {\n    const res = {};\n    images.forEach((image) => {\n      res[image.id] = image.fileName;\n    });\n    return res;\n}\n\nconst App = () => {\n  // useRef Hooks\n  const canvasRef = useRef(null);\n  \n  // useState Hooks\n  const [ currentStroke, setCurrentStroke ] = useState({});\n  const [ currentChar, setCurrentChar ] = useState({});\n  const [ strokeList, setStrokeList ] = useState({});\n  const [ strokeIndex, setStrokeIndex ] = useState(1); // 现在是第几个笔画\n  const [ strokeCompleted,  setStrokeCompleted] = useState(false); // 记录是否完成当前字\n  const [ imagesUrls, mapUrls ] = useState({});\n  const [ systemInfo, setSystemInfo ] = useState({});\n  const [ result, setResult ] = useState([]);\n  const [ tempPoints, addPoints ] = useState([]);\n  const [ currentAuthor, setCurrentAuthor ] = useState([]);\n\n  // Loading\n  const [ sysInfoLoading, setSysInfoLoading ] = useState(true);\n  const [ currentCharLoading, setCurrentCharLoading ] = useState(true);\n  const [ strokeListLoading, setStrokeListLoading ] = useState(true);\n  const [ submitLoading, setSubmitLoading ] = useState(false);\n  const [ submitSuccess, setSubmitSuccess ] = useState(false);\n\n  // useEffect Hooks\n    // init char\n  useEffect(() => {\n    (async () => {\n      setSysInfoLoading(() => true);\n      const reqResult = await axios('http://localhost:4000/api/system-info');\n      setSystemInfo(() => reqResult.data);\n      setSysInfoLoading(() => false);\n    })();\n    canvasClear(); // 顺便清空一下canvas\n  }, [ submitSuccess ]);\n    // 重新获取字的信息和笔画的信息\n  useEffect(() => {\n    if (sysInfoLoading) return;\n    (async () => {\n      setCurrentCharLoading(() => true);\n      const reqResult = await axios('http://localhost:4000/api/character-info?id=' + systemInfo.currentImageId);\n      setCurrentChar(() => reqResult.data);\n      setCurrentCharLoading(() => false);\n      setSubmitSuccess(() => false);\n      setStrokeIndex(() => 1);\n      setStrokeCompleted(() => false);\n      setResult(() => []);\n      setCurrentAuthor(() => systemInfo.author);\n    })();\n  }, [ sysInfoLoading, systemInfo ]);\n    // 如果获取了字的信息，那么更新笔画的信息\n  useEffect(() => {\n    if (currentCharLoading) return;\n    (async () => {\n      setStrokeListLoading(() => true);\n      const reqResult = await axios('http://localhost:4000/api/strokes-list?id=' + currentChar.c_id);\n      setStrokeList(() => reqResult.data);\n      setStrokeListLoading(() => false);\n    })();\n  }, [ currentCharLoading, currentChar ]);\n    // 笔画列表动了，那笔画进度肯定要清零。\n  useEffect(() => {\n    setStrokeIndex(() => 1);\n  }, [ strokeList ]);\n    // 笔画进度一旦修改，那么当前笔画一定要更新，缓存数据要清零\n  useEffect(() => {\n    if (strokeListLoading) return;\n    // console.log(\"who\" + strokeList[strokeIndex-1]);\n    // console.log(strokesData);\n    // console.log(strokesData.strokes.find(stroke => stroke.id === strokeList[strokeIndex-1]));\n    setCurrentStroke(() => strokesData.strokes.find(stroke => stroke.id === strokeList[strokeIndex-1]));\n    addPoints(() => []);\n  }, [ strokeListLoading, strokeIndex, strokeList ]);\n\n\n  useEffect(() => mapUrls(getMapImageUrls), []);\n\n  const Paint = (e) => { // 每次点击canvas\n    // console.log(tempPoints.length, currentStroke.strokeOrderLength);\n    if (tempPoints.length + 1 > currentStroke.strokeOrderLength) {\n      message.error('关键点数量溢出，请检查数量');\n      return;\n    }\n    const canvas = canvasRef.current;\n    const { left, top } = canvas.getBoundingClientRect();\n    const x = e.clientX - left, y = e.clientY - top;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.lineWidth = 4;\n    ctx.beginPath();\n    ctx.arc(x, y, 5, 0, 2*Math.PI);\n    ctx.strokeStyle = \"magenta\";\n    ctx.fillStyle = \"magenta\";\n    ctx.stroke();\n    // console.log(tempPoints);\n    addPoints(() => {\n      return [...tempPoints, [x, y]];\n    });\n  }\n\n  const canvasClear = () => {\n    // console.log(\"qingkong\");\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, 256, 256);\n    addPoints(() => []);\n  };\n\n  const nextStroke = () => {\n    // console.log(tempPoints.length, currentStroke.strokeOrderLength);\n    if (strokeCompleted) {\n      message.warning(\"已经录入完成所有笔画，请进入下一个字\");\n      return;\n    }\n    if (tempPoints.length !== currentStroke.strokeOrderLength) {\n      message.warning(\"关键点录入未完成\");\n      return;\n    }\n    const thisStroke = {\n      id: currentStroke.id,\n      name: currentStroke.name,\n      record: tempPoints\n    }\n    canvasClear();\n    setResult(() => [...result, thisStroke]);\n    if (strokeIndex < strokeList.length) {\n      setStrokeIndex(strokeIndex => strokeIndex + 1);\n    } else {\n      setStrokeCompleted(true);\n    }\n  };\n\n  const reStartChar = () => {\n    canvasClear();\n    setResult(() => []);\n    setStrokeCompleted(() => false);\n    setStrokeIndex(() => 1);\n  };\n\n  const submitChar = (skip) => {\n    if (!strokeCompleted && !skip) {\n      message.warning(\"笔画数量未达到预设标准\");\n      return;\n    }\n    setSubmitLoading(true);\n    (async () => {\n      // console.log(currentChar);\n      const ans = {\n        dataSetId: systemInfo.dataSetId,\n        currentImageId: systemInfo.currentImageId,\n        author: currentAuthor,\n        charId: currentChar.id,\n        skip,\n        charName: currentChar.name,\n        result\n      }\n      const reqResult = await axios.post('http://localhost:4000/api/submit', ans);\n      // console.log(reqResult.data);\n      (reqResult.data === \"success\") && setSubmitSuccess(() => true);\n      setSubmitLoading(false);\n    })();\n  };\n\n  useHotkeys('c', () => nextStroke(), {}, [ strokeCompleted, tempPoints, currentStroke, result, strokeList, strokeIndex ]);\n  useHotkeys('z', () => canvasClear());\n  useHotkeys('x', () => reStartChar());\n  useHotkeys('h', () => submitChar(true), {}, [ strokeCompleted, systemInfo, currentChar, currentAuthor ]);\n  useHotkeys('v', () => submitChar(false), {}, [ strokeCompleted, systemInfo, currentChar, currentAuthor ]);\n  \n\n  return (\n    <Wrapper>\n      <LeftWrapper>\n        <StrokeNameList>\n          <span style={{ fontSize: \"25px\", margin: \"10px\" }}>笔画列表（自动选择）</span>\n          {\n            strokeListLoading ? (\n              <Spin tip=\"Loading...\">\n                <Alert\n                  message=\"strokeList\"\n                  description=\"strokeList strokeList strokeList strokeList strokeList strokeList \"\n                  type=\"info\"\n                />\n              </Spin>\n            ) : (\n              <Radio.Group \n                style={{margin: \"17px\" }}\n                value={strokeList[strokeIndex-1]} size=\"large\" buttonStyle=\"solid\">\n                {\n                  strokesData.strokes.map((item) => {\n                    return (\n                      <Radio.Button key={`stroke_${item.id}`} value={item.id} \n                        onClick={() => message.warning(\"目前不允许修改笔顺，请修改配置文件适配\")}\n                      >\n                        { item.name }\n                      </Radio.Button>\n                    )\n                  })\n                }\n              </Radio.Group>\n            )\n          }\n        </StrokeNameList>\n        <StrokeShow>\n          { \n            currentCharLoading ? (\n              <Spin tip=\"Loading...\">\n                <Alert\n                  message=\"currentChar\"\n                  description=\"currentChar currentChar currentChar currentChar currentChar currentChar\"\n                  type=\"info\"\n                />\n              </Spin>\n            ) : (\n              <Descriptions \n                style={{ height: \"auto\", width: \"650px\", padding: \"20px\", \n                  border: \"1px solid black\",\n                  borderRadius: \"10px\",\n                  borderTop: \"1px solid white\"}}\n                title={\n                  <TitleWrapper>\n                    <TitleTextSpan>当前笔画信息：{`${currentStroke.id} - ${currentStroke.name}`} </TitleTextSpan>\n                    <div>\n                      {TextRegular(`关键点标记进度[${tempPoints.length}/${currentStroke.strokeOrderLength}]: `)}\n                      <Progress percent={(tempPoints.length/currentStroke.strokeOrderLength)*100} steps={currentStroke.strokeOrderLength} showInfo={false}/>\n                    </div>\n                  </TitleWrapper>\n                } \n                bordered\n              >\n                <Descriptions.Item label={TextRegular('笔画示意图')}>\n                  <ImageContainer>\n                    <Image src={`/assets/stroke-example/${currentStroke.strokeOrderImageUrl}`} />\n                  </ImageContainer>\n                </Descriptions.Item>\n                <Descriptions.Item label={TextRegular('节点分布图')} span={2}>\n                  <ImageContainer>\n                    <Image src={`/assets/stroke-order/${currentStroke.strokeOrderImageUrl}`} />\n                  </ImageContainer>\n                </Descriptions.Item>\n              </Descriptions>\n            )\n          } \n        </StrokeShow >\n      </LeftWrapper>\n      <RightWrapper>\n            {\n              sysInfoLoading && currentCharLoading ? (\n              <Spin tip=\"Loading...\">\n                <Alert\n                  message=\"sysInfo, currentChar\"\n                  description=\" \"\n                  type=\"info\"\n                />\n              </Spin>\n              ) : (\n                <DataSetTitle>\n                  <TitleWrapper>\n                    <TitleTextSpan>\n                      数据集：{systemInfo.dataSetId}号\n                      {/* <span style={{fontSize: \"20px\", color: \"#909090\"}}>     进度：[{systemInfo.currentImageId}/{systemInfo.total}]</span> */}\n                    </TitleTextSpan>\n                    <Input \n                      style={{ width: '40%' }} \n                      size=\"large\" \n                      placeholder=\"记录人\" \n                      prefix={<UserOutlined />} \n                      value={currentAuthor} \n                      onChange={e => setCurrentAuthor(() => e.target.value)}\n                    />\n                  </TitleWrapper>\n                  <TitleTextSpan2><Badge status=\"processing\" />当前字：\"{currentChar.name}\"，进度：{systemInfo.currentImageId}/{systemInfo.total}</TitleTextSpan2>\n                </DataSetTitle>\n              )\n            }\n        <CharacterWrapper>\n          <FunctionWrapper>\n            <span>请在红框内进行标记</span>\n            <Character>\n              {\n                sysInfoLoading ? (\n                <Spin tip=\"Loading...\">\n                  <Alert\n                    message=\"sysInfo\"\n                    description=\"sysInfo sysInfo sysInfo sysInfo \"\n                    type=\"info\"\n                  />\n                </Spin>\n                ) : (\n                  <img \n                    alt=\"\"\n                    style={{\n                      left: \"0px\",\n                      position: \"absolute\"\n                    }}\n                    src={`/assets/source/${systemInfo.dataSetId}/${imagesUrls[systemInfo.currentImageId]}`}\n                  >\n                  </img>\n                )\n              }\n\n              <canvas\n                width=\"256px\"\n                height=\"256px\"\n                ref={canvasRef}\n                onClick={e => Paint(e)}\n              >\n              </canvas>\n            </Character>\n            <ButtonWrapper>\n              <Button \n                size=\"large\" \n                type=\"primary\" \n                onClick={() => nextStroke()}\n                disabled={tempPoints.length !== currentStroke.strokeOrderLength}\n              >下一个笔画（C）</Button>\n              <Button size=\"large\" onClick={canvasClear}> 清空该笔画关键点（Z）</Button>\n              <Button size=\"large\" danger onClick={reStartChar}>重新开始本字（X）</Button>\n              <Button size=\"large\" type=\"dashed\" danger onClick={() => submitChar(true)}>本字难以辨认，跳过（H）</Button>\n            </ButtonWrapper>\n          </FunctionWrapper>\n          <HistoryWrapper>\n            <ContextRegularSpan\n              style={{\n                margin: 10,\n                borderBottom: '2px solid black'\n              }}\n            >\n              输出结果<br></br>\n            </ContextRegularSpan>\n            <div style={{ overflow: \"scroll\", height: \"340px\", width: \"100%\"}}>\n            { \n              strokeListLoading ? (\n                <Spin tip=\"strokeList\">\n                </Spin>\n              ) : (\n                  result.map((item, index) => {\n                    // console.log(item);\n                    return (\n                        <div key={index} style={{ fontSize: \"18px\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}> \n                          <span>\n                            ({index + 1}) {item.name}\n                          </span>\n                          <span\n                            style={{\n                              margin: 5,\n                              borderBottom: '1px solid gray'\n                            }}\n                          >\n                            <div \n                              // style={{ fontSize: \"18px\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}\n                            >\n                              {\n                                item.record.map((item2, index2) => {\n                                  return (\n                                    <span key={index2}> ({item2[0]}, {item2[1]})</span>\n                                  )\n                                })\n                              }\n                            </div>\n                          </span>\n                        </div>\n                    )\n                  })\n              )\n            }\n            </div>\n            <div>\n              <Progress style={{margin: \"10px\"}} type=\"circle\" status={ submitSuccess ? null : \"active\"} percent={\n                strokeCompleted ? 100 : (((strokeIndex-1)/strokeList.length)*100)\n              } width={80} />\n              { submitLoading ? (<Spin />) : null }\n            </div>\n            <Button \n              // style={{margin: \"10px\"}} \n              size=\"large\" type=\"primary\" \n              onClick={() => submitChar(false)} \n              disabled={!strokeCompleted}\n            >提交本字（V）</Button>\n          </HistoryWrapper>\n        </CharacterWrapper>\n      </RightWrapper>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}