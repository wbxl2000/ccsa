{"version":3,"sources":["style.js","App.js","index.js"],"names":["Wrapper","styled","div","LeftWrapper","RightWrapper","StrokeShow","StrokeNameList","CharacterWrapper","FunctionWrapper","HistoryWrapper","Character","ButtonWrapper","TitleTextSpan","span","TitleTextSpan2","ContextRegularSpan","ImageContainer","TitleWrapper","DataSetTitle","TextRegular","text","App","canvasRef","useRef","useState","currentStroke","setCurrentStroke","currentChar","setCurrentChar","strokeList","setStrokeList","strokeIndex","setStrokeIndex","strokeCompleted","setStrokeCompleted","systemInfo","setSystemInfo","result","setResult","tempPoints","addPoints","currentAuthor","setCurrentAuthor","total","setTotal","fullComplete","setFullComplete","sysInfoLoading","setSysInfoLoading","currentCharLoading","setCurrentCharLoading","strokeListLoading","setStrokeListLoading","submitLoading","setSubmitLoading","submitSuccess","setSubmitSuccess","canvasClear","useCallback","current","getContext","clearRect","useEffect","a","axios","reqResult","data","currentImageId","img","author","cId","strokesData","strokes","find","stroke","id","console","log","message","success","nextStroke","warning","length","strokeOrderLength","thisStroke","name","record","reStartChar","submitChar","skip","myDate","Date","ans","dataSetId","charId","charName","date","toLocaleString","post","useHotkeys","style","margin","status","title","extra","type","onClick","fontSize","tip","description","Group","value","size","buttonStyle","map","item","Button","height","width","padding","border","borderRadius","borderTop","percent","steps","showInfo","bordered","Item","label","src","strokeOrderImageUrl","placeholder","prefix","UserOutlined","onChange","e","target","alt","left","position","fileName","ref","error","canvas","getBoundingClientRect","top","x","clientX","y","clientY","ctx","lineWidth","beginPath","arc","Math","PI","strokeStyle","fillStyle","Paint","disabled","danger","borderBottom","overflow","index","display","flexDirection","alignItems","item2","index2","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9dff6857.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  margin: 50px auto;\r\n  width: 1500px;\r\n  height: 800px;\r\n  border: 2px solid black;\r\n  border-radius: 20px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  canvas {\r\n    width: 256px;\r\n    height: 256px;\r\n    border: 2px solid black;\r\n  }\r\n`;\r\n\r\n// 左侧\r\nexport const LeftWrapper = styled.div`\r\n  width: 750px;\r\n  height: 750px;\r\n  border-right: 2px solid gray;\r\n  padding-right: 5px;\r\n  /* border-radius: 20px; */\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\n// 右侧大的组件\r\nexport const RightWrapper = styled.div`\r\n  margin-left: auto;\r\n  width: 800px;\r\n  height: 750px;\r\n  /* border: 2px solid black; */\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport const StrokeShow = styled.div`\r\n  /* border: 1px solid red; */\r\n  /* border-top: 1px solid #C0C0C0; */\r\n  /* height: 630px; */\r\n  margin-bottom: 27px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n  .text {\r\n    font-size : 25px;\r\n  }\r\n`;\r\n\r\nexport const StrokeNameList = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  margin-top: 10px;\r\n  border-bottom: #C0C0C0;\r\n  width: 650px;\r\n  border: 1px solid black;\r\n  border-radius: 10px;\r\n  border-bottom: 1px solid white;\r\n`;\r\n\r\nexport const CharacterWrapper = styled.div`\r\n  width: 650px;\r\n  height: 600px;\r\n  border: 1px solid black;\r\n  border-radius: 10px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const FunctionWrapper = styled.div`\r\n  width: 300px;\r\n  /* border: 1px solid blue; */\r\n`;\r\n\r\nexport const HistoryWrapper = styled.div`\r\n  margin: 20px;\r\n  width: 250px;\r\n  border: 1px solid gray;\r\n  border-radius: 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Character = styled.div`\r\n  width: 300px;\r\n  height: 300px;\r\n  border: 1px solid gray;\r\n  border-radius: 5px;\r\n  position: relative;\r\n  canvas {\r\n    width: 256px;\r\n    height: 256px;\r\n    margin: 22px;\r\n    border: 0;\r\n  }\r\n  img {\r\n    width: 256px;\r\n    height: 256px;\r\n    border: 1px solid red;\r\n    margin: 22px;\r\n    z-index: -1;\r\n  }\r\n`;\r\n\r\n\r\nexport const ButtonWrapper = styled.div`\r\n  margin-top: 20px;\r\n  width: 256px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  Button {\r\n    margin: 5px;\r\n  }\r\n`;\r\n\r\nexport const StrokePicture = styled.div`\r\n  width: 45px;\r\n  height: 45px;\r\n  border: 2px solid #1890ff;\r\n  img {\r\n    margin: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n  \r\n`;\r\n\r\nexport const CurrentStrokeWrapper = styled.div`\r\n  margin: 20px;\r\n`;\r\n\r\nexport const TitleTextSpan = styled.span`\r\n  font-size: 22px;\r\n`;\r\n\r\n\r\nexport const TitleTextSpan2 = styled.span`\r\n  font-size: 20px;\r\n`;\r\n\r\nexport const ContextRegularSpan = styled.span`\r\n  font-size: 18px;\r\n  font-weight: normal;\r\n`;\r\n\r\n\r\nexport const ImageContainer = styled.div`\r\n  width: 140px;\r\n  height: auto;\r\n  border: 1px solid #1890FF;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const TitleWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n`;\r\n\r\nexport const DataSetTitle = styled.div`\r\n  margin-top: 20px;\r\n  height: auto;\r\n  width: 648px;\r\n`;\r\n\r\n// 是否已经标注\r\n// 撤销笔画\r\n// 跳转到哪一个字（记录个人标注的进度）+ 30/111","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport axios from 'axios';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport './App.css';\n\nimport strokesData from './config/strokes-detail.json';\n\nimport {\n  Wrapper,\n  RightWrapper,\n  StrokeShow,\n  LeftWrapper,\n  CharacterWrapper,\n  FunctionWrapper,\n  HistoryWrapper,\n  Character,\n  ButtonWrapper,\n  StrokeNameList,\n  TitleTextSpan,\n  ContextRegularSpan,\n  ImageContainer,\n  TitleWrapper,\n  DataSetTitle,\n  TitleTextSpan2\n} from './style';\n\nimport { Result, Button, Radio, Progress, Image, Descriptions, Badge, message, Input, Spin, Alert } from 'antd';\n\nimport { UserOutlined } from '@ant-design/icons';\n\nconst TextRegular = (text) => {\n  return (\n    <ContextRegularSpan>{text}</ContextRegularSpan>\n  )\n}\n\nconst App = () => {\n  // useRef Hooks\n  const canvasRef = useRef(null);\n  \n  // useState Hooks\n  const [ currentStroke, setCurrentStroke ] = useState({});\n  const [ currentChar, setCurrentChar ] = useState({});\n  const [ strokeList, setStrokeList ] = useState({});\n  const [ strokeIndex, setStrokeIndex ] = useState(1); // 现在是第几个笔画\n  const [ strokeCompleted,  setStrokeCompleted] = useState(false); // 记录是否完成当前字\n  const [ systemInfo, setSystemInfo ] = useState({});\n  const [ result, setResult ] = useState([]);\n  const [ tempPoints, addPoints ] = useState([]);\n  const [ currentAuthor, setCurrentAuthor ] = useState([]);\n  const [ total, setTotal ] = useState(999); \n  const [ fullComplete, setFullComplete ] = useState(false);\n\n  // Loading\n  const [ sysInfoLoading, setSysInfoLoading ] = useState(true);\n  const [ currentCharLoading, setCurrentCharLoading ] = useState(true);\n  const [ strokeListLoading, setStrokeListLoading ] = useState(true);\n  const [ submitLoading, setSubmitLoading ] = useState(false);\n  const [ submitSuccess, setSubmitSuccess ] = useState(false);\n  \n  const canvasClear = useCallback(() => {\n    if (fullComplete) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, 256, 256);\n    addPoints(() => []);\n  }, [ canvasRef, fullComplete ]);\n\n  // useEffect Hooks\n    // init char\n  useEffect(() => {\n    (async () => {\n      setSysInfoLoading(() => true);\n      const reqResult = await axios('http://localhost:4000/api/system-info');\n      setSystemInfo(() => reqResult.data);\n      setSysInfoLoading(() => false);\n    })();\n    canvasClear(); // 顺便清空一下canvas\n  }, [ submitSuccess, canvasClear ]);\n    // 重新获取字的信息和笔画的信息\n  useEffect(() => {\n    if (sysInfoLoading) return;\n    if (fullComplete) return;\n    (async () => {\n      setCurrentCharLoading(() => true);\n      const reqResult = await axios('http://localhost:4000/api/character-info?id=' + systemInfo.currentImageId);\n      setCurrentChar(() => reqResult.data.img);\n      setTotal(() => setTotal(reqResult.data.total));\n      setCurrentCharLoading(() => false);\n      setSubmitSuccess(() => false);\n      setStrokeIndex(() => 1);\n      setStrokeCompleted(() => false);\n      setResult(() => []);\n      setCurrentAuthor(() => systemInfo.author);\n    })();\n  }, [ sysInfoLoading, systemInfo, fullComplete ]);\n    // 如果获取了字的信息，那么更新笔画的信息\n  useEffect(() => {\n    if (currentCharLoading) return;\n    if (fullComplete) return;\n    (async () => {\n      setStrokeListLoading(() => true);\n      const reqResult = await axios('http://localhost:4000/api/strokes-list?id=' + currentChar.cId);\n      setStrokeList(() => reqResult.data);\n      setStrokeListLoading(() => false);\n    })();\n  }, [ currentCharLoading, currentChar, fullComplete ]);\n    // 笔画列表动了，那笔画进度肯定要清零。\n  useEffect(() => {\n    setStrokeIndex(() => 1);\n  }, [ strokeList ]);\n    // 笔画进度一旦修改，那么当前笔画一定要更新，缓存数据要清零\n  useEffect(() => {\n    if (strokeListLoading) return;\n    setCurrentStroke(() => strokesData.strokes.find(stroke => stroke.id === strokeList[strokeIndex-1]));\n    addPoints(() => []);\n  }, [ strokeListLoading, strokeIndex, strokeList ]);\n\n  useEffect(() => {\n    if (systemInfo.currentImageId > total) {\n      console.log(systemInfo.currentImageId, total);\n      // message.success(\"全部完成啦！\");\n      setFullComplete(() => true);\n    }\n  }, [ systemInfo, total ]);\n\n  useEffect(() => {\n    if (strokeCompleted) {\n      message.success(\"该字已完成\")\n    }\n  }, [ strokeCompleted ])\n\n  const Paint = (e) => { // 每次点击canvas\n    if (tempPoints.length + 1 > currentStroke.strokeOrderLength) {\n      message.error('关键点数量溢出，请检查数量');\n      return;\n    }\n    const canvas = canvasRef.current;\n    const { left, top } = canvas.getBoundingClientRect();\n    const x = e.clientX - left, y = e.clientY - top;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.lineWidth = 4;\n    ctx.beginPath();\n    ctx.arc(x, y, 5, 0, 2*Math.PI);\n    ctx.strokeStyle = \"magenta\";\n    ctx.fillStyle = \"magenta\";\n    ctx.stroke();\n    addPoints(() => {\n      return [...tempPoints, [x, y]];\n    });\n  }\n\n\n  const nextStroke = () => {\n    if (strokeCompleted) {\n      message.warning(\"已经录入完成所有笔画，请进入下一个字\");\n      return;\n    }\n    if (tempPoints.length !== currentStroke.strokeOrderLength) {\n      message.warning(\"关键点录入未完成\");\n      return;\n    }\n    const thisStroke = {\n      id: currentStroke.id,\n      name: currentStroke.name,\n      record: tempPoints\n    }\n    canvasClear();\n    setResult(() => [...result, thisStroke]);\n    if (strokeIndex < strokeList.length) {\n      setStrokeIndex(strokeIndex => strokeIndex + 1);\n    } else {\n      setStrokeCompleted(true);\n    }\n  };\n\n  const reStartChar = () => {\n    canvasClear();\n    setResult(() => []);\n    setStrokeCompleted(() => false);\n    setStrokeIndex(() => 1);\n  };\n\n  const submitChar = (skip) => {\n    if (!strokeCompleted && !skip) {\n      message.warning(\"笔画数量未达到预设标准\");\n      return;\n    }\n    setSubmitLoading(true);\n    let myDate = new Date();\n    (async () => {\n      const ans = {\n        dataSetId: systemInfo.dataSetId,\n        currentImageId: systemInfo.currentImageId,\n        author: currentAuthor,\n        charId: currentChar.id,\n        skip,\n        charName: currentChar.name,\n        date: myDate.toLocaleString(),\n        result\n      }\n      const reqResult = await axios.post('http://localhost:4000/api/submit', ans);\n      (reqResult.data === \"success\") && setSubmitSuccess(() => true);\n      setSubmitLoading(false);\n    })();\n  };\n\n  const nextDataset = () => {\n    (async () => {\n      const ans = {\n        dataSetId: systemInfo.dataSetId\n      }\n      const reqResult = await axios.post('http://localhost:4000/api/next-dataset', ans);\n      (reqResult.data === \"success\") && setFullComplete(() => false);\n      setSubmitLoading(false);\n    })();\n  };\n\n  useHotkeys('c', () => nextStroke(), {}, [ strokeCompleted, tempPoints, currentStroke, result, strokeList, strokeIndex ]);\n  useHotkeys('z', () => canvasClear());\n  useHotkeys('x', () => reStartChar());\n  useHotkeys('h', () => submitChar(true), {}, [ strokeCompleted, systemInfo, currentChar, currentAuthor ]);\n  useHotkeys('v', () => submitChar(false), {}, [ strokeCompleted, systemInfo, currentChar, currentAuthor ]);\n\n\n  return (\n    <Wrapper>\n      {\n        fullComplete ? (\n          <Result\n            style={{margin: 'auto'}}\n            status=\"success\"\n            title=\"当前数据集已标注完成\"\n            extra={[\n              <Button type=\"primary\" onClick={() => nextDataset()}>\n                下一个\n              </Button>,\n            ]}\n          />\n        ) : (\n          <>\n            <LeftWrapper>\n              <StrokeNameList>\n                <span style={{ fontSize: \"25px\", margin: \"10px\" }}>笔画列表（自动选择）</span>\n                {\n                  strokeListLoading ? (\n                    <Spin tip=\"Loading...\">\n                      <Alert\n                        message=\"strokeList\"\n                        description=\"strokeList strokeList strokeList strokeList strokeList strokeList \"\n                        type=\"info\"\n                      />\n                    </Spin>\n                  ) : (\n                    <Radio.Group \n                      style={{margin: \"17px\" }}\n                      value={strokeList[strokeIndex-1]} size=\"large\" buttonStyle=\"solid\">\n                      {\n                        strokesData.strokes.map((item) => {\n                          return (\n                            <Radio.Button key={`stroke_${item.id}`} value={item.id} \n                              onClick={() => message.warning(\"目前不允许修改笔顺，请修改配置文件适配\")}\n                            >\n                              { item.name }\n                            </Radio.Button>\n                          )\n                        })\n                      }\n                    </Radio.Group>\n                  )\n                }\n              </StrokeNameList>\n              <StrokeShow>\n                { \n                  currentCharLoading ? (\n                    <Spin tip=\"Loading...\">\n                      <Alert\n                        message=\"currentChar\"\n                        description=\"currentChar currentChar currentChar currentChar currentChar currentChar\"\n                        type=\"info\"\n                      />\n                    </Spin>\n                  ) : (\n                    <Descriptions \n                      style={{ height: \"auto\", width: \"650px\", padding: \"20px\", \n                        border: \"1px solid black\",\n                        borderRadius: \"10px\",\n                        borderTop: \"1px solid white\"}}\n                      title={\n                        <TitleWrapper>\n                          <TitleTextSpan>当前笔画信息：{`${currentStroke.id} - ${currentStroke.name}`} </TitleTextSpan>\n                          <div>\n                            {TextRegular(`关键点标记进度[${tempPoints.length}/${currentStroke.strokeOrderLength}]: `)}\n                            <Progress percent={(tempPoints.length/currentStroke.strokeOrderLength)*100} steps={currentStroke.strokeOrderLength} showInfo={false}/>\n                          </div>\n                        </TitleWrapper>\n                      } \n                      bordered\n                    >\n                      <Descriptions.Item label={TextRegular('笔画示意图')}>\n                        <ImageContainer>\n                          <Image src={`/assets/stroke-example/${currentStroke.strokeOrderImageUrl}`} />\n                        </ImageContainer>\n                      </Descriptions.Item>\n                      <Descriptions.Item label={TextRegular('节点分布图')} span={2}>\n                        <ImageContainer>\n                          <Image src={`/assets/stroke-order/${currentStroke.strokeOrderImageUrl}`} />\n                        </ImageContainer>\n                      </Descriptions.Item>\n                    </Descriptions>\n                  )\n                } \n              </StrokeShow >\n            </LeftWrapper>\n            <RightWrapper>\n                  {\n                    sysInfoLoading && currentCharLoading ? (\n                    <Spin tip=\"Loading...\">\n                      <Alert\n                        message=\"sysInfo, currentChar\"\n                        description=\" \"\n                        type=\"info\"\n                      />\n                    </Spin>\n                    ) : (\n                      <DataSetTitle>\n                        <TitleWrapper>\n                          <TitleTextSpan>\n                            数据集：{systemInfo.dataSetId}号\n                          </TitleTextSpan>\n                          <Input \n                            style={{ width: '40%' }} \n                            size=\"large\" \n                            placeholder=\"请填写记录人\" \n                            prefix={<UserOutlined />} \n                            value={currentAuthor} \n                            onChange={e => setCurrentAuthor(() => e.target.value)}\n                          />\n                        </TitleWrapper>\n                        <TitleTextSpan2><Badge status=\"processing\" />当前字：\"{currentChar.name}\"，进度：{systemInfo.currentImageId}/{total}</TitleTextSpan2>\n                      </DataSetTitle>\n                    )\n                  }\n              <CharacterWrapper>\n                <FunctionWrapper>\n                  <span>请在红框内进行标记</span>\n                  <Character>\n                    {\n                      sysInfoLoading ? (\n                      <Spin tip=\"Loading...\">\n                        <Alert\n                          message=\"sysInfo\"\n                          description=\"sysInfo sysInfo sysInfo sysInfo \"\n                          type=\"info\"\n                        />\n                      </Spin>\n                      ) : (\n                        <img \n                          alt=\"\"\n                          style={{\n                            left: \"0px\",\n                            position: \"absolute\"\n                          }}\n                          src={currentChar ? (`http://localhost:4000/${systemInfo.dataSetId}/${currentChar.fileName}`) : null}\n                        >\n                        </img>\n                      )\n                    }\n\n                    <canvas\n                      width=\"256px\"\n                      height=\"256px\"\n                      ref={canvasRef}\n                      onClick={e => Paint(e)}\n                    >\n                    </canvas>\n                  </Character>\n                  <ButtonWrapper>\n                    <Button \n                      size=\"large\" \n                      type=\"primary\" \n                      onClick={() => nextStroke()}\n                      disabled={(tempPoints.length !== currentStroke.strokeOrderLength) || (strokeCompleted)}\n                    >下一个笔画（C）</Button>\n                    <Button size=\"large\" onClick={canvasClear}> 清空该笔画关键点（Z）</Button>\n                    <Button size=\"large\" danger onClick={reStartChar}>重新开始本字（X）</Button>\n                    <Button size=\"large\" type=\"dashed\" danger onClick={() => submitChar(true)}>本字难以辨认，跳过（H）</Button>\n                  </ButtonWrapper>\n                </FunctionWrapper>\n                <HistoryWrapper>\n                  <ContextRegularSpan\n                    style={{\n                      margin: 10,\n                      borderBottom: '2px solid black'\n                    }}\n                  >\n                    输出结果<br></br>\n                  </ContextRegularSpan>\n                  <div style={{ overflow: \"scroll\", height: \"340px\", width: \"100%\"}}>\n                  { \n                    strokeListLoading ? (\n                      <Spin tip=\"strokeList\">\n                      </Spin>\n                    ) : (\n                        result.map((item, index) => {\n                          return (\n                              <div key={index} style={{ fontSize: \"18px\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}> \n                                <span>\n                                  ({index + 1}) {item.name}\n                                </span>\n                                <span\n                                  style={{\n                                    margin: 5,\n                                    borderBottom: '1px solid gray'\n                                  }}\n                                >\n                                  <div \n                                  >\n                                    {\n                                      item.record.map((item2, index2) => {\n                                        return (\n                                          <span key={index2}> ({item2[0]}, {item2[1]})</span>\n                                        )\n                                      })\n                                    }\n                                  </div>\n                                </span>\n                              </div>\n                          )\n                        })\n                    )\n                  }\n                  </div>\n                  <div>\n                    <Progress style={{margin: \"10px\"}} type=\"circle\" status={ submitSuccess ? null : \"active\"} percent={\n                      strokeCompleted ? 100 : (((strokeIndex-1)/strokeList.length)*100)\n                    } width={80} />\n                    { submitLoading ? (<Spin />) : null }\n                  </div>\n                  <Button \n                    size=\"large\" type=\"primary\" \n                    onClick={() => submitChar(false)} \n                    disabled={!strokeCompleted}\n                  >\n                    提交本字（V）\n                  </Button>\n                </HistoryWrapper>\n              </CharacterWrapper>\n            </RightWrapper>\n          </>\n        )\n      }\n\n    </Wrapper>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}